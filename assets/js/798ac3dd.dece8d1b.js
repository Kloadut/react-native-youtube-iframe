(self.webpackChunkreact_native_youtube_iframe=self.webpackChunkreact_native_youtube_iframe||[]).push([[972],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=l(n),m=a,d=f["".concat(s,".").concat(m)]||f[m]||p[m]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1322:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return l},default:function(){return p}});var r=n(4034),a=n(9973),o=(n(7294),n(3905)),i={id:"elapsed-time",title:"Show elapsed time"},c=void 0,s={unversionedId:"elapsed-time",id:"elapsed-time",isDocsHomePage:!1,title:"Show elapsed time",description:"The player provides a way to fetch current time. Combining this with setInterval is the right way to go, since you can control the accuracy and frequency of the reading.",source:"@site/../docs/show-elapsed-time.mdx",sourceDirName:".",slug:"/elapsed-time",permalink:"/react-native-youtube-iframe/elapsed-time",version:"current",frontMatter:{id:"elapsed-time",title:"Show elapsed time"},sidebar:"sideBar",previous:{title:"Remove Context Menu",permalink:"/react-native-youtube-iframe/remove-context-share"},next:{title:"Crash when used with react-navigation",permalink:"/react-native-youtube-iframe/navigation-crash"}},l=[],u={toc:l};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The player provides a way to fetch current time. Combining this with ",(0,o.kt)("inlineCode",{parentName:"p"},"setInterval")," is the right way to go, since you can control the accuracy and frequency of the reading."),(0,o.kt)("p",null,"example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React, {useState, useRef, useEffect} from 'react';\nimport {Text, View} from 'react-native';\nimport YoutubePlayer from 'react-native-youtube-iframe';\n\nconst App = () => {\n  const [elapsed, setElapsed] = useState(0);\n  const playerRef = useRef();\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const elapsed_sec = await playerRef.current.getCurrentTime(); // this is a promise. dont forget to await\n\n      // calculations\n      const elapsed_ms = Math.floor(elapsed_sec * 1000);\n      const ms = elapsed_ms % 1000;\n      const min = Math.floor(elapsed_ms / 60000);\n      const seconds = Math.floor((elapsed_ms - min * 60000) / 1000);\n\n      setElapsed(\n        min.toString().padStart(2, '0') +\n          ':' +\n          seconds.toString().padStart(2, '0') +\n          ':' +\n          ms.toString().padStart(3, '0'),\n      );\n    }, 100); // 100 ms refresh. increase it if you don't require millisecond precision\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return (\n    <>\n      <YoutubePlayer\n        height={250}\n        ref={playerRef}\n        videoId={'DC471a9qrU4'}\n      />\n      <View>\n        <View style={{flexDirection: 'row'}}>\n          <Text style={{flex: 1}}>{'elapsed time'}</Text>\n          <Text style={{flex: 1, color: 'green'}}>{elapsed}</Text>\n        </View>\n    </>\n  );\n};\n")))}p.isMDXComponent=!0}}]);